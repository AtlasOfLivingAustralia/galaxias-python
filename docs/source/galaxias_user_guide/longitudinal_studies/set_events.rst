.. _set_events:

set_events
==================

For this function, we are only checking the ``events`` dataframe.  This function will check specifically for:

- ``eventID``: ID of all your events. Can be constructed, or can be generated by ``corella`` using ``uuid``.
- ``parentEventID``: linked ID of all your events.  Events are in a hierarchy, which we will discuss below.
- ``eventType``: what type of event is it (i.e. Survey, BioBlitz, Site Visit etc.)
- ``eventDate``: date of the event
- ``Event``: name of the event
- ``samplingProtocol``: how did you record your data (i.e. Observation, etc.)

Adding event-specific information 
-----------------------------------------

For events, we need to specify all of the above information.  First, we need to specify the event type.  For 
the events file we have, this is under the heading ``type``.  We can also specify how all of the data was collected; 
however, rather than specifying a column name, we are going to specify the value of ``Observation``.  Finally, 
we need to specify the name of the event, which is the column headed ``name``.

.. prompt:: python

    >>> my_dwca.set_events(eventType='type',
    ...                    samplingProtocol='Observation',
    ...                    Event='name')
    >>> my_dwca.events.head()

.. program-output:: python galaxias_user_guide/longitudinal_studies/events_workflow.py 4

The reason that the ``events`` file needs these IDs is because each event may have multiple things happening 
during it.  For example, when you visit a site (highest order of event happening), you usually take what is 
termed a 'sample' (second highest order of event happening).  After this, there are many activities that can 
constitute a 'sample': 

- take measurements of environment (ambient temperature, for example)
- quantify species traits
- observe what species are at the site

The way to quantify this in your ``events`` file is via an "Event Hierarchy".

Event hierarchy example
-----------------------------------------

For our example, we are only concerned with observations, or what species were observed at the site.  
``galaxias`` takes a dictionary with each event given a ranking: ``1`` for the highest 'order' event, 
``2`` for the second highest event, and so on.

.. prompt:: python

    >>> my_dwca.set_events(eventType='type',
    ...                    samplingProtocol='Observation',
    ...                    Event='name',
    ...                    event_hierarchy={1: "Site Visit", 2: "Sample", 3: "Observation"},
    ...                    random_id=True)
    >>> my_dwca.events.head()

.. program-output:: python galaxias_user_guide/longitudinal_studies/events_workflow.py 5

what does ``check_dataset`` and ``suggest_workflow`` say now? 
----------------------------------------------------------------

*Note:* each of the ``set_*`` functions checks your data for compliance with the 
Darwin core standard, but it's always good to double-check your data.

Now, we can check that our data column do comply with the Darwin Core standard.

.. prompt:: python

    >>> my_dwca.check_dataset()

.. program-output:: python galaxias_user_guide/longitudinal_studies/events_workflow.py 6

However, since we don't have all of the required columns, we can run ``suggest_workflow()`` 
again to see how our data is doing this time round.

.. prompt:: python

    >>> my_dwca.suggest_workflow()

.. program-output:: python galaxias_user_guide/longitudinal_studies/events_workflow.py 7

Other functions
-----------------------------------------

To learn more about how to use these functions, go to 

 - `set_datetime <set_datetime.html>`_

Optional functions:

- `set_abundance <set_abundance_events>`_
- `set_locality <set_locality_events.html>`_

Passing Dataset:

- `Passing Dataset <passing_dataset.html>`_